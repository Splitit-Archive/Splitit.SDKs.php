<?php
/**
 * GetInitiatedInstallmentPlanResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * GetInitiatedInstallmentPlanResponse Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetInitiatedInstallmentPlanResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetInitiatedInstallmentPlanResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'response_header' => '\SplititSdkClient\Model\ResponseHeader',
        'installment_plan_number' => 'string',
        'plan_data' => '\SplititSdkClient\Model\PlanData',
        'cart_data' => '\SplititSdkClient\Model\CartData',
        'consumer_data' => '\SplititSdkClient\Model\ConsumerData',
        'merchant_data' => '\SplititSdkClient\Model\MerchantRef',
        'billing_address' => '\SplititSdkClient\Model\AddressData',
        'payment_wizard_data_response' => '\SplititSdkClient\Model\PaymentWizardDataResponse',
        'error_indicator' => '\SplititSdkClient\Model\Error'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'response_header' => null,
        'installment_plan_number' => null,
        'plan_data' => null,
        'cart_data' => null,
        'consumer_data' => null,
        'merchant_data' => null,
        'billing_address' => null,
        'payment_wizard_data_response' => null,
        'error_indicator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response_header' => 'ResponseHeader',
        'installment_plan_number' => 'InstallmentPlanNumber',
        'plan_data' => 'PlanData',
        'cart_data' => 'CartData',
        'consumer_data' => 'ConsumerData',
        'merchant_data' => 'MerchantData',
        'billing_address' => 'BillingAddress',
        'payment_wizard_data_response' => 'PaymentWizardDataResponse',
        'error_indicator' => 'ErrorIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response_header' => 'setResponseHeader',
        'installment_plan_number' => 'setInstallmentPlanNumber',
        'plan_data' => 'setPlanData',
        'cart_data' => 'setCartData',
        'consumer_data' => 'setConsumerData',
        'merchant_data' => 'setMerchantData',
        'billing_address' => 'setBillingAddress',
        'payment_wizard_data_response' => 'setPaymentWizardDataResponse',
        'error_indicator' => 'setErrorIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response_header' => 'getResponseHeader',
        'installment_plan_number' => 'getInstallmentPlanNumber',
        'plan_data' => 'getPlanData',
        'cart_data' => 'getCartData',
        'consumer_data' => 'getConsumerData',
        'merchant_data' => 'getMerchantData',
        'billing_address' => 'getBillingAddress',
        'payment_wizard_data_response' => 'getPaymentWizardDataResponse',
        'error_indicator' => 'getErrorIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['response_header'] = isset($data['response_header']) ? $data['response_header'] : null;
        $this->container['installment_plan_number'] = isset($data['installment_plan_number']) ? $data['installment_plan_number'] : null;
        $this->container['plan_data'] = isset($data['plan_data']) ? $data['plan_data'] : null;
        $this->container['cart_data'] = isset($data['cart_data']) ? $data['cart_data'] : null;
        $this->container['consumer_data'] = isset($data['consumer_data']) ? $data['consumer_data'] : null;
        $this->container['merchant_data'] = isset($data['merchant_data']) ? $data['merchant_data'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['payment_wizard_data_response'] = isset($data['payment_wizard_data_response']) ? $data['payment_wizard_data_response'] : null;
        $this->container['error_indicator'] = isset($data['error_indicator']) ? $data['error_indicator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response_header
     *
     * @return \SplititSdkClient\Model\ResponseHeader
     */
    public function getResponseHeader()
    {
        return $this->container['response_header'];
    }

    /**
     * Sets response_header
     *
     * @param \SplititSdkClient\Model\ResponseHeader $response_header response_header
     *
     * @return $this
     */
    public function setResponseHeader($response_header)
    {
        $this->container['response_header'] = $response_header;

        return $this;
    }

    /**
     * Gets installment_plan_number
     *
     * @return string
     */
    public function getInstallmentPlanNumber()
    {
        return $this->container['installment_plan_number'];
    }

    /**
     * Sets installment_plan_number
     *
     * @param string $installment_plan_number installment_plan_number
     *
     * @return $this
     */
    public function setInstallmentPlanNumber($installment_plan_number)
    {
        $this->container['installment_plan_number'] = $installment_plan_number;

        return $this;
    }

    /**
     * Gets plan_data
     *
     * @return \SplititSdkClient\Model\PlanData
     */
    public function getPlanData()
    {
        return $this->container['plan_data'];
    }

    /**
     * Sets plan_data
     *
     * @param \SplititSdkClient\Model\PlanData $plan_data plan_data
     *
     * @return $this
     */
    public function setPlanData($plan_data)
    {
        $this->container['plan_data'] = $plan_data;

        return $this;
    }

    /**
     * Gets cart_data
     *
     * @return \SplititSdkClient\Model\CartData
     */
    public function getCartData()
    {
        return $this->container['cart_data'];
    }

    /**
     * Sets cart_data
     *
     * @param \SplititSdkClient\Model\CartData $cart_data cart_data
     *
     * @return $this
     */
    public function setCartData($cart_data)
    {
        $this->container['cart_data'] = $cart_data;

        return $this;
    }

    /**
     * Gets consumer_data
     *
     * @return \SplititSdkClient\Model\ConsumerData
     */
    public function getConsumerData()
    {
        return $this->container['consumer_data'];
    }

    /**
     * Sets consumer_data
     *
     * @param \SplititSdkClient\Model\ConsumerData $consumer_data consumer_data
     *
     * @return $this
     */
    public function setConsumerData($consumer_data)
    {
        $this->container['consumer_data'] = $consumer_data;

        return $this;
    }

    /**
     * Gets merchant_data
     *
     * @return \SplititSdkClient\Model\MerchantRef
     */
    public function getMerchantData()
    {
        return $this->container['merchant_data'];
    }

    /**
     * Sets merchant_data
     *
     * @param \SplititSdkClient\Model\MerchantRef $merchant_data merchant_data
     *
     * @return $this
     */
    public function setMerchantData($merchant_data)
    {
        $this->container['merchant_data'] = $merchant_data;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \SplititSdkClient\Model\AddressData
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \SplititSdkClient\Model\AddressData $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets payment_wizard_data_response
     *
     * @return \SplititSdkClient\Model\PaymentWizardDataResponse
     */
    public function getPaymentWizardDataResponse()
    {
        return $this->container['payment_wizard_data_response'];
    }

    /**
     * Sets payment_wizard_data_response
     *
     * @param \SplititSdkClient\Model\PaymentWizardDataResponse $payment_wizard_data_response payment_wizard_data_response
     *
     * @return $this
     */
    public function setPaymentWizardDataResponse($payment_wizard_data_response)
    {
        $this->container['payment_wizard_data_response'] = $payment_wizard_data_response;

        return $this;
    }

    /**
     * Gets error_indicator
     *
     * @return \SplititSdkClient\Model\Error
     */
    public function getErrorIndicator()
    {
        return $this->container['error_indicator'];
    }

    /**
     * Sets error_indicator
     *
     * @param \SplititSdkClient\Model\Error $error_indicator error_indicator
     *
     * @return $this
     */
    public function setErrorIndicator($error_indicator)
    {
        $this->container['error_indicator'] = $error_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


