<?php
/**
 * LearnMoreDetailsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * LearnMoreDetailsResponse Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LearnMoreDetailsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LearnMoreDetailsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'response_header' => '\SplititSdkClient\Model\ResponseHeader',
        'supports_credit_card' => 'bool',
        'supports_debit_card' => 'bool',
        'show_secure_strategy_info' => 'bool',
        'show_non_secure_strategy_info' => 'bool',
        'total' => '\SplititSdkClient\Model\MoneyWithCurrencyCode',
        'installments' => '\SplititSdkClient\Model\Installment2[]',
        'number_of_installments' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'response_header' => null,
        'supports_credit_card' => null,
        'supports_debit_card' => null,
        'show_secure_strategy_info' => null,
        'show_non_secure_strategy_info' => null,
        'total' => null,
        'installments' => null,
        'number_of_installments' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response_header' => 'ResponseHeader',
        'supports_credit_card' => 'SupportsCreditCard',
        'supports_debit_card' => 'SupportsDebitCard',
        'show_secure_strategy_info' => 'ShowSecureStrategyInfo',
        'show_non_secure_strategy_info' => 'ShowNonSecureStrategyInfo',
        'total' => 'Total',
        'installments' => 'Installments',
        'number_of_installments' => 'NumberOfInstallments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response_header' => 'setResponseHeader',
        'supports_credit_card' => 'setSupportsCreditCard',
        'supports_debit_card' => 'setSupportsDebitCard',
        'show_secure_strategy_info' => 'setShowSecureStrategyInfo',
        'show_non_secure_strategy_info' => 'setShowNonSecureStrategyInfo',
        'total' => 'setTotal',
        'installments' => 'setInstallments',
        'number_of_installments' => 'setNumberOfInstallments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response_header' => 'getResponseHeader',
        'supports_credit_card' => 'getSupportsCreditCard',
        'supports_debit_card' => 'getSupportsDebitCard',
        'show_secure_strategy_info' => 'getShowSecureStrategyInfo',
        'show_non_secure_strategy_info' => 'getShowNonSecureStrategyInfo',
        'total' => 'getTotal',
        'installments' => 'getInstallments',
        'number_of_installments' => 'getNumberOfInstallments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['response_header'] = isset($data['response_header']) ? $data['response_header'] : null;
        $this->container['supports_credit_card'] = isset($data['supports_credit_card']) ? $data['supports_credit_card'] : null;
        $this->container['supports_debit_card'] = isset($data['supports_debit_card']) ? $data['supports_debit_card'] : null;
        $this->container['show_secure_strategy_info'] = isset($data['show_secure_strategy_info']) ? $data['show_secure_strategy_info'] : null;
        $this->container['show_non_secure_strategy_info'] = isset($data['show_non_secure_strategy_info']) ? $data['show_non_secure_strategy_info'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['installments'] = isset($data['installments']) ? $data['installments'] : null;
        $this->container['number_of_installments'] = isset($data['number_of_installments']) ? $data['number_of_installments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['supports_credit_card'] === null) {
            $invalidProperties[] = "'supports_credit_card' can't be null";
        }
        if ($this->container['supports_debit_card'] === null) {
            $invalidProperties[] = "'supports_debit_card' can't be null";
        }
        if ($this->container['show_secure_strategy_info'] === null) {
            $invalidProperties[] = "'show_secure_strategy_info' can't be null";
        }
        if ($this->container['show_non_secure_strategy_info'] === null) {
            $invalidProperties[] = "'show_non_secure_strategy_info' can't be null";
        }
        if ($this->container['number_of_installments'] === null) {
            $invalidProperties[] = "'number_of_installments' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response_header
     *
     * @return \SplititSdkClient\Model\ResponseHeader
     */
    public function getResponseHeader()
    {
        return $this->container['response_header'];
    }

    /**
     * Sets response_header
     *
     * @param \SplititSdkClient\Model\ResponseHeader $response_header response_header
     *
     * @return $this
     */
    public function setResponseHeader($response_header)
    {
        $this->container['response_header'] = $response_header;

        return $this;
    }

    /**
     * Gets supports_credit_card
     *
     * @return bool
     */
    public function getSupportsCreditCard()
    {
        return $this->container['supports_credit_card'];
    }

    /**
     * Sets supports_credit_card
     *
     * @param bool $supports_credit_card supports_credit_card
     *
     * @return $this
     */
    public function setSupportsCreditCard($supports_credit_card)
    {
        $this->container['supports_credit_card'] = $supports_credit_card;

        return $this;
    }

    /**
     * Gets supports_debit_card
     *
     * @return bool
     */
    public function getSupportsDebitCard()
    {
        return $this->container['supports_debit_card'];
    }

    /**
     * Sets supports_debit_card
     *
     * @param bool $supports_debit_card supports_debit_card
     *
     * @return $this
     */
    public function setSupportsDebitCard($supports_debit_card)
    {
        $this->container['supports_debit_card'] = $supports_debit_card;

        return $this;
    }

    /**
     * Gets show_secure_strategy_info
     *
     * @return bool
     */
    public function getShowSecureStrategyInfo()
    {
        return $this->container['show_secure_strategy_info'];
    }

    /**
     * Sets show_secure_strategy_info
     *
     * @param bool $show_secure_strategy_info show_secure_strategy_info
     *
     * @return $this
     */
    public function setShowSecureStrategyInfo($show_secure_strategy_info)
    {
        $this->container['show_secure_strategy_info'] = $show_secure_strategy_info;

        return $this;
    }

    /**
     * Gets show_non_secure_strategy_info
     *
     * @return bool
     */
    public function getShowNonSecureStrategyInfo()
    {
        return $this->container['show_non_secure_strategy_info'];
    }

    /**
     * Sets show_non_secure_strategy_info
     *
     * @param bool $show_non_secure_strategy_info show_non_secure_strategy_info
     *
     * @return $this
     */
    public function setShowNonSecureStrategyInfo($show_non_secure_strategy_info)
    {
        $this->container['show_non_secure_strategy_info'] = $show_non_secure_strategy_info;

        return $this;
    }

    /**
     * Gets total
     *
     * @return \SplititSdkClient\Model\MoneyWithCurrencyCode
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param \SplititSdkClient\Model\MoneyWithCurrencyCode $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \SplititSdkClient\Model\Installment2[]
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \SplititSdkClient\Model\Installment2[] $installments installments
     *
     * @return $this
     */
    public function setInstallments($installments)
    {
        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets number_of_installments
     *
     * @return int
     */
    public function getNumberOfInstallments()
    {
        return $this->container['number_of_installments'];
    }

    /**
     * Sets number_of_installments
     *
     * @param int $number_of_installments number_of_installments
     *
     * @return $this
     */
    public function setNumberOfInstallments($number_of_installments)
    {
        $this->container['number_of_installments'] = $number_of_installments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

