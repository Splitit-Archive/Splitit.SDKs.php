<?php
/**
 * Get3DSecureParametersResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * Get3DSecureParametersResponse Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Get3DSecureParametersResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Get3DSecureParametersResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'response_header' => '\SplititSdkClient\Model\ResponseHeader',
        'issuer_redirect_url' => 'string',
        'pa_req' => 'string',
        'md' => 'string',
        'term_url' => 'string',
        'three_d_secure_params' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'response_header' => null,
        'issuer_redirect_url' => null,
        'pa_req' => null,
        'md' => null,
        'term_url' => null,
        'three_d_secure_params' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response_header' => 'ResponseHeader',
        'issuer_redirect_url' => 'IssuerRedirectUrl',
        'pa_req' => 'PaReq',
        'md' => 'Md',
        'term_url' => 'TermUrl',
        'three_d_secure_params' => 'ThreeDSecureParams'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response_header' => 'setResponseHeader',
        'issuer_redirect_url' => 'setIssuerRedirectUrl',
        'pa_req' => 'setPaReq',
        'md' => 'setMd',
        'term_url' => 'setTermUrl',
        'three_d_secure_params' => 'setThreeDSecureParams'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response_header' => 'getResponseHeader',
        'issuer_redirect_url' => 'getIssuerRedirectUrl',
        'pa_req' => 'getPaReq',
        'md' => 'getMd',
        'term_url' => 'getTermUrl',
        'three_d_secure_params' => 'getThreeDSecureParams'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['response_header'] = isset($data['response_header']) ? $data['response_header'] : null;
        $this->container['issuer_redirect_url'] = isset($data['issuer_redirect_url']) ? $data['issuer_redirect_url'] : null;
        $this->container['pa_req'] = isset($data['pa_req']) ? $data['pa_req'] : null;
        $this->container['md'] = isset($data['md']) ? $data['md'] : null;
        $this->container['term_url'] = isset($data['term_url']) ? $data['term_url'] : null;
        $this->container['three_d_secure_params'] = isset($data['three_d_secure_params']) ? $data['three_d_secure_params'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response_header
     *
     * @return \SplititSdkClient\Model\ResponseHeader
     */
    public function getResponseHeader()
    {
        return $this->container['response_header'];
    }

    /**
     * Sets response_header
     *
     * @param \SplititSdkClient\Model\ResponseHeader $response_header response_header
     *
     * @return $this
     */
    public function setResponseHeader($response_header)
    {
        $this->container['response_header'] = $response_header;

        return $this;
    }

    /**
     * Gets issuer_redirect_url
     *
     * @return string
     */
    public function getIssuerRedirectUrl()
    {
        return $this->container['issuer_redirect_url'];
    }

    /**
     * Sets issuer_redirect_url
     *
     * @param string $issuer_redirect_url issuer_redirect_url
     *
     * @return $this
     */
    public function setIssuerRedirectUrl($issuer_redirect_url)
    {
        $this->container['issuer_redirect_url'] = $issuer_redirect_url;

        return $this;
    }

    /**
     * Gets pa_req
     *
     * @return string
     */
    public function getPaReq()
    {
        return $this->container['pa_req'];
    }

    /**
     * Sets pa_req
     *
     * @param string $pa_req pa_req
     *
     * @return $this
     */
    public function setPaReq($pa_req)
    {
        $this->container['pa_req'] = $pa_req;

        return $this;
    }

    /**
     * Gets md
     *
     * @return string
     */
    public function getMd()
    {
        return $this->container['md'];
    }

    /**
     * Sets md
     *
     * @param string $md md
     *
     * @return $this
     */
    public function setMd($md)
    {
        $this->container['md'] = $md;

        return $this;
    }

    /**
     * Gets term_url
     *
     * @return string
     */
    public function getTermUrl()
    {
        return $this->container['term_url'];
    }

    /**
     * Sets term_url
     *
     * @param string $term_url term_url
     *
     * @return $this
     */
    public function setTermUrl($term_url)
    {
        $this->container['term_url'] = $term_url;

        return $this;
    }

    /**
     * Gets three_d_secure_params
     *
     * @return map[string,string]
     */
    public function getThreeDSecureParams()
    {
        return $this->container['three_d_secure_params'];
    }

    /**
     * Sets three_d_secure_params
     *
     * @param map[string,string] $three_d_secure_params three_d_secure_params
     *
     * @return $this
     */
    public function setThreeDSecureParams($three_d_secure_params)
    {
        $this->container['three_d_secure_params'] = $three_d_secure_params;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

