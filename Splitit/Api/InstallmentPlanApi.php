<?php
/**
 * InstallmentPlanApi
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SplititSdkClient\ApiException;
use SplititSdkClient\Model\RequestHeader;
use SplititSdkClient\Configuration;
use SplititSdkClient\HeaderSelector;
use SplititSdkClient\ObjectSerializer;

/**
 * InstallmentPlanApi Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Splitit
 * @link     https://github.com/Splitit/Splitit.SDKs
 */
class InstallmentPlanApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var string
     */
    protected $sessionId;

    protected $culture;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param Configuration   $config
     * @param string   $sessionId
     * @param HeaderSelector  $selector
     */
    public function __construct(
        Configuration $config = null,
        string $sessionId = null,
        HeaderSelector $selector = null
    ) {
        $this->client = new Client();
        $this->config = $config ?: Configuration::production();
        $this->sessionId = $sessionId;
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    public function setCulture($culture)
    {
        $this->culture = $culture;
    }

    protected function injectSessionRequestHeaders($request)
    {
        if (!is_null($this->sessionId)){
            $requestHeader = new RequestHeader();

            if (!is_null($this->sessionId)){
                $requestHeader->setSessionId($this->sessionId);
            }

            if (!is_null($this->config->getApiKey())){
                $requestHeader->setApiKey($this->config->getApiKey());
            }

            if (!is_null($this->config->getTouchPoint())){
                $requestHeader->setTouchPoint($this->config->getTouchPoint());
            }

            if (!is_null($this->culture)){
                $requestHeader->setCultureName($this->culture);
            }

            $request->offsetSet('request_header', $requestHeader);
        }
    }

    /**
     * Operation installmentPlanApprove
     *
     * @param  \SplititSdkClient\Model\ApproveInstallmentPlanRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\InstallmentPlanResponse
     */
    public function installmentPlanApprove($request)
    {
        list($response) = $this->installmentPlanApproveWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanApproveWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\ApproveInstallmentPlanRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\InstallmentPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanApproveWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InstallmentPlanResponse';
        $request = $this->installmentPlanApproveRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\InstallmentPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanApproveAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\ApproveInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanApproveAsync($request)
    {
        return $this->installmentPlanApproveAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanApproveAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\ApproveInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanApproveAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InstallmentPlanResponse';
        $request = $this->installmentPlanApproveRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanApprove'
     *
     * @param  \SplititSdkClient\Model\ApproveInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanApproveRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanApprove'
            );
        }

        $resourcePath = '/api/InstallmentPlan/Approve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanCancel
     *
     * @param  \SplititSdkClient\Model\CancelInstallmentPlanRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\InstallmentPlanResponse
     */
    public function installmentPlanCancel($request)
    {
        list($response) = $this->installmentPlanCancelWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanCancelWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\CancelInstallmentPlanRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\InstallmentPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanCancelWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InstallmentPlanResponse';
        $request = $this->installmentPlanCancelRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\InstallmentPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanCancelAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\CancelInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanCancelAsync($request)
    {
        return $this->installmentPlanCancelAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanCancelAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\CancelInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanCancelAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InstallmentPlanResponse';
        $request = $this->installmentPlanCancelRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanCancel'
     *
     * @param  \SplititSdkClient\Model\CancelInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanCancelRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanCancel'
            );
        }

        $resourcePath = '/api/InstallmentPlan/Cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanChargeBack
     *
     * @param  \SplititSdkClient\Model\ChargebackRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\InstallmentPlanResponse
     */
    public function installmentPlanChargeBack($request)
    {
        list($response) = $this->installmentPlanChargeBackWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanChargeBackWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\ChargebackRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\InstallmentPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanChargeBackWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InstallmentPlanResponse';
        $request = $this->installmentPlanChargeBackRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\InstallmentPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanChargeBackAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\ChargebackRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanChargeBackAsync($request)
    {
        return $this->installmentPlanChargeBackAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanChargeBackAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\ChargebackRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanChargeBackAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InstallmentPlanResponse';
        $request = $this->installmentPlanChargeBackRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanChargeBack'
     *
     * @param  \SplititSdkClient\Model\ChargebackRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanChargeBackRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanChargeBack'
            );
        }

        $resourcePath = '/api/InstallmentPlan/ChargeBack';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanCreate
     *
     * @param  \SplititSdkClient\Model\CreateInstallmentPlanRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\CreateInstallmentsPlanResponse
     */
    public function installmentPlanCreate($request)
    {
        list($response) = $this->installmentPlanCreateWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanCreateWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\CreateInstallmentPlanRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\CreateInstallmentsPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanCreateWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\CreateInstallmentsPlanResponse';
        $request = $this->installmentPlanCreateRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\CreateInstallmentsPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanCreateAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\CreateInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanCreateAsync($request)
    {
        return $this->installmentPlanCreateAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\CreateInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanCreateAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\CreateInstallmentsPlanResponse';
        $request = $this->installmentPlanCreateRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanCreate'
     *
     * @param  \SplititSdkClient\Model\CreateInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanCreateRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanCreate'
            );
        }

        $resourcePath = '/api/InstallmentPlan/Create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanGet
     *
     * @param  \SplititSdkClient\Model\GetInstallmentsPlanSearchCriteriaRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\GetInstallmentsPlanResponse
     */
    public function installmentPlanGet($request)
    {
        list($response) = $this->installmentPlanGetWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanGetWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\GetInstallmentsPlanSearchCriteriaRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\GetInstallmentsPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanGetWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetInstallmentsPlanResponse';
        $request = $this->installmentPlanGetRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\GetInstallmentsPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanGetAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetInstallmentsPlanSearchCriteriaRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetAsync($request)
    {
        return $this->installmentPlanGetAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetInstallmentsPlanSearchCriteriaRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetInstallmentsPlanResponse';
        $request = $this->installmentPlanGetRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanGet'
     *
     * @param  \SplititSdkClient\Model\GetInstallmentsPlanSearchCriteriaRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanGetRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanGet'
            );
        }

        $resourcePath = '/api/InstallmentPlan/Get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanGet3DSecureParameters
     *
     * @param  \SplititSdkClient\Model\Get3DSecureParametersRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\Get3DSecureParametersResponse
     */
    public function installmentPlanGet3DSecureParameters($request)
    {
        list($response) = $this->installmentPlanGet3DSecureParametersWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanGet3DSecureParametersWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\Get3DSecureParametersRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\Get3DSecureParametersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanGet3DSecureParametersWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\Get3DSecureParametersResponse';
        $request = $this->installmentPlanGet3DSecureParametersRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\Get3DSecureParametersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanGet3DSecureParametersAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\Get3DSecureParametersRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGet3DSecureParametersAsync($request)
    {
        return $this->installmentPlanGet3DSecureParametersAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanGet3DSecureParametersAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\Get3DSecureParametersRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGet3DSecureParametersAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\Get3DSecureParametersResponse';
        $request = $this->installmentPlanGet3DSecureParametersRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanGet3DSecureParameters'
     *
     * @param  \SplititSdkClient\Model\Get3DSecureParametersRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanGet3DSecureParametersRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanGet3DSecureParameters'
            );
        }

        $resourcePath = '/api/InstallmentPlan/Get3DSecureParameters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanGetExtended
     *
     * @param  \SplititSdkClient\Model\GetInstallmentsPlanSearchCriteriaRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\GetInstallmentsPlanExtendedResponse
     */
    public function installmentPlanGetExtended($request)
    {
        list($response) = $this->installmentPlanGetExtendedWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanGetExtendedWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\GetInstallmentsPlanSearchCriteriaRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\GetInstallmentsPlanExtendedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanGetExtendedWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetInstallmentsPlanExtendedResponse';
        $request = $this->installmentPlanGetExtendedRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\GetInstallmentsPlanExtendedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanGetExtendedAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetInstallmentsPlanSearchCriteriaRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetExtendedAsync($request)
    {
        return $this->installmentPlanGetExtendedAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanGetExtendedAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetInstallmentsPlanSearchCriteriaRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetExtendedAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetInstallmentsPlanExtendedResponse';
        $request = $this->installmentPlanGetExtendedRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanGetExtended'
     *
     * @param  \SplititSdkClient\Model\GetInstallmentsPlanSearchCriteriaRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanGetExtendedRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanGetExtended'
            );
        }

        $resourcePath = '/api/InstallmentPlan/GetExtended';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanGetFraudStatusDisplay
     *
     * @param  \SplititSdkClient\Model\GetFraudStatusDisplayRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\GetFraudStatusDisplayResponse
     */
    public function installmentPlanGetFraudStatusDisplay($request)
    {
        list($response) = $this->installmentPlanGetFraudStatusDisplayWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanGetFraudStatusDisplayWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\GetFraudStatusDisplayRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\GetFraudStatusDisplayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanGetFraudStatusDisplayWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetFraudStatusDisplayResponse';
        $request = $this->installmentPlanGetFraudStatusDisplayRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\GetFraudStatusDisplayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanGetFraudStatusDisplayAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetFraudStatusDisplayRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetFraudStatusDisplayAsync($request)
    {
        return $this->installmentPlanGetFraudStatusDisplayAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanGetFraudStatusDisplayAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetFraudStatusDisplayRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetFraudStatusDisplayAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetFraudStatusDisplayResponse';
        $request = $this->installmentPlanGetFraudStatusDisplayRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanGetFraudStatusDisplay'
     *
     * @param  \SplititSdkClient\Model\GetFraudStatusDisplayRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanGetFraudStatusDisplayRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanGetFraudStatusDisplay'
            );
        }

        $resourcePath = '/api/InstallmentPlan/GetFraudStatusDisplay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanGetInitiatedInstallmentPlanRequest
     *
     * @param  \SplititSdkClient\Model\GetInitiatedInstallmentPlanRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\GetInitiatedInstallmentPlanResponse
     */
    public function installmentPlanGetInitiatedInstallmentPlanRequest($request)
    {
        list($response) = $this->installmentPlanGetInitiatedInstallmentPlanRequestWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanGetInitiatedInstallmentPlanRequestWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\GetInitiatedInstallmentPlanRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\GetInitiatedInstallmentPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanGetInitiatedInstallmentPlanRequestWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetInitiatedInstallmentPlanResponse';
        $request = $this->installmentPlanGetInitiatedInstallmentPlanRequestRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\GetInitiatedInstallmentPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanGetInitiatedInstallmentPlanRequestAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetInitiatedInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetInitiatedInstallmentPlanRequestAsync($request)
    {
        return $this->installmentPlanGetInitiatedInstallmentPlanRequestAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanGetInitiatedInstallmentPlanRequestAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetInitiatedInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetInitiatedInstallmentPlanRequestAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetInitiatedInstallmentPlanResponse';
        $request = $this->installmentPlanGetInitiatedInstallmentPlanRequestRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanGetInitiatedInstallmentPlanRequest'
     *
     * @param  \SplititSdkClient\Model\GetInitiatedInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanGetInitiatedInstallmentPlanRequestRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanGetInitiatedInstallmentPlanRequest'
            );
        }

        $resourcePath = '/api/InstallmentPlan/GetInitiatedInstallmentPlanRequest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanGetInitiatedUpdatePaymentData
     *
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\GetInitiatedUpdatePaymentDataResponse
     */
    public function installmentPlanGetInitiatedUpdatePaymentData()
    {
        list($response) = $this->installmentPlanGetInitiatedUpdatePaymentDataWithHttpInfo();
        return $response;
    }

    /**
     * Operation installmentPlanGetInitiatedUpdatePaymentDataWithHttpInfo
     *
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\GetInitiatedUpdatePaymentDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanGetInitiatedUpdatePaymentDataWithHttpInfo()
    {
        $returnType = '\SplititSdkClient\Model\GetInitiatedUpdatePaymentDataResponse';
        $request = $this->installmentPlanGetInitiatedUpdatePaymentDataRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\GetInitiatedUpdatePaymentDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanGetInitiatedUpdatePaymentDataAsync
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetInitiatedUpdatePaymentDataAsync()
    {
        return $this->installmentPlanGetInitiatedUpdatePaymentDataAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanGetInitiatedUpdatePaymentDataAsyncWithHttpInfo
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetInitiatedUpdatePaymentDataAsyncWithHttpInfo()
    {
        $returnType = '\SplititSdkClient\Model\GetInitiatedUpdatePaymentDataResponse';
        $request = $this->installmentPlanGetInitiatedUpdatePaymentDataRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanGetInitiatedUpdatePaymentData'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanGetInitiatedUpdatePaymentDataRequest()
    {

        $resourcePath = '/api/InstallmentPlan/GetInitiatedUpdatePaymentData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanGetLearnMoreDetails
     *
     * @param  \SplititSdkClient\Model\LearnMoreDetailsRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\LearnMoreDetailsResponse
     */
    public function installmentPlanGetLearnMoreDetails($request)
    {
        list($response) = $this->installmentPlanGetLearnMoreDetailsWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanGetLearnMoreDetailsWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\LearnMoreDetailsRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\LearnMoreDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanGetLearnMoreDetailsWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\LearnMoreDetailsResponse';
        $request = $this->installmentPlanGetLearnMoreDetailsRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\LearnMoreDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanGetLearnMoreDetailsAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\LearnMoreDetailsRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetLearnMoreDetailsAsync($request)
    {
        return $this->installmentPlanGetLearnMoreDetailsAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanGetLearnMoreDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\LearnMoreDetailsRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetLearnMoreDetailsAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\LearnMoreDetailsResponse';
        $request = $this->installmentPlanGetLearnMoreDetailsRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanGetLearnMoreDetails'
     *
     * @param  \SplititSdkClient\Model\LearnMoreDetailsRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanGetLearnMoreDetailsRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanGetLearnMoreDetails'
            );
        }

        $resourcePath = '/api/InstallmentPlan/GetLearnMoreDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanGetPGTL
     *
     * @param  \SplititSdkClient\Model\GetPGTLRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\GetPGTLResponse
     */
    public function installmentPlanGetPGTL($request)
    {
        list($response) = $this->installmentPlanGetPGTLWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanGetPGTLWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\GetPGTLRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\GetPGTLResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanGetPGTLWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetPGTLResponse';
        $request = $this->installmentPlanGetPGTLRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\GetPGTLResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanGetPGTLAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetPGTLRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetPGTLAsync($request)
    {
        return $this->installmentPlanGetPGTLAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanGetPGTLAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetPGTLRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetPGTLAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetPGTLResponse';
        $request = $this->installmentPlanGetPGTLRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanGetPGTL'
     *
     * @param  \SplititSdkClient\Model\GetPGTLRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanGetPGTLRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanGetPGTL'
            );
        }

        $resourcePath = '/api/InstallmentPlan/GetPGTL';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanGetSchedules
     *
     * @param  \SplititSdkClient\Model\GetInstallmentSchedulesRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\GetInstallmentsScheduleResponse
     */
    public function installmentPlanGetSchedules($request)
    {
        list($response) = $this->installmentPlanGetSchedulesWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanGetSchedulesWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\GetInstallmentSchedulesRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\GetInstallmentsScheduleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanGetSchedulesWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetInstallmentsScheduleResponse';
        $request = $this->installmentPlanGetSchedulesRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\GetInstallmentsScheduleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanGetSchedulesAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetInstallmentSchedulesRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetSchedulesAsync($request)
    {
        return $this->installmentPlanGetSchedulesAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanGetSchedulesAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\GetInstallmentSchedulesRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanGetSchedulesAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\GetInstallmentsScheduleResponse';
        $request = $this->installmentPlanGetSchedulesRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanGetSchedules'
     *
     * @param  \SplititSdkClient\Model\GetInstallmentSchedulesRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanGetSchedulesRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanGetSchedules'
            );
        }

        $resourcePath = '/api/InstallmentPlan/GetSchedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanInitiate
     *
     * @param  \SplititSdkClient\Model\InitiateInstallmentPlanRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\InitiateInstallmentsPlanResponse
     */
    public function installmentPlanInitiate($request)
    {
        list($response) = $this->installmentPlanInitiateWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanInitiateWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\InitiateInstallmentPlanRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\InitiateInstallmentsPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanInitiateWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InitiateInstallmentsPlanResponse';
        $request = $this->installmentPlanInitiateRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\InitiateInstallmentsPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanInitiateAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\InitiateInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanInitiateAsync($request)
    {
        return $this->installmentPlanInitiateAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanInitiateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\InitiateInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanInitiateAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InitiateInstallmentsPlanResponse';
        $request = $this->installmentPlanInitiateRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanInitiate'
     *
     * @param  \SplititSdkClient\Model\InitiateInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanInitiateRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanInitiate'
            );
        }

        $resourcePath = '/api/InstallmentPlan/Initiate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanRefund
     *
     * @param  \SplititSdkClient\Model\RefundPlanRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\RefundInstallmentPlanResponse
     */
    public function installmentPlanRefund($request)
    {
        list($response) = $this->installmentPlanRefundWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanRefundWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\RefundPlanRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\RefundInstallmentPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanRefundWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\RefundInstallmentPlanResponse';
        $request = $this->installmentPlanRefundRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\RefundInstallmentPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanRefundAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\RefundPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanRefundAsync($request)
    {
        return $this->installmentPlanRefundAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanRefundAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\RefundPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanRefundAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\RefundInstallmentPlanResponse';
        $request = $this->installmentPlanRefundRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanRefund'
     *
     * @param  \SplititSdkClient\Model\RefundPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanRefundRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanRefund'
            );
        }

        $resourcePath = '/api/InstallmentPlan/Refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanRequestPayment
     *
     * @param  \SplititSdkClient\Model\RequestPaymentRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\RequestPaymentResponse
     */
    public function installmentPlanRequestPayment($request)
    {
        list($response) = $this->installmentPlanRequestPaymentWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanRequestPaymentWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\RequestPaymentRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\RequestPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanRequestPaymentWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\RequestPaymentResponse';
        $request = $this->installmentPlanRequestPaymentRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\RequestPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanRequestPaymentAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\RequestPaymentRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanRequestPaymentAsync($request)
    {
        return $this->installmentPlanRequestPaymentAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanRequestPaymentAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\RequestPaymentRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanRequestPaymentAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\RequestPaymentResponse';
        $request = $this->installmentPlanRequestPaymentRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanRequestPayment'
     *
     * @param  \SplititSdkClient\Model\RequestPaymentRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanRequestPaymentRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanRequestPayment'
            );
        }

        $resourcePath = '/api/InstallmentPlan/RequestPayment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanStartInstallments
     *
     * @param  \SplititSdkClient\Model\StartInstallmentsRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\InstallmentPlanResponse
     */
    public function installmentPlanStartInstallments($request)
    {
        list($response) = $this->installmentPlanStartInstallmentsWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanStartInstallmentsWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\StartInstallmentsRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\InstallmentPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanStartInstallmentsWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InstallmentPlanResponse';
        $request = $this->installmentPlanStartInstallmentsRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\InstallmentPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanStartInstallmentsAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\StartInstallmentsRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanStartInstallmentsAsync($request)
    {
        return $this->installmentPlanStartInstallmentsAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanStartInstallmentsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\StartInstallmentsRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanStartInstallmentsAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InstallmentPlanResponse';
        $request = $this->installmentPlanStartInstallmentsRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanStartInstallments'
     *
     * @param  \SplititSdkClient\Model\StartInstallmentsRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanStartInstallmentsRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanStartInstallments'
            );
        }

        $resourcePath = '/api/InstallmentPlan/StartInstallments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanTermsAndConditions
     *
     * @param  \SplititSdkClient\Model\TermsAndConditionsGetRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\TermsAndConditionsGetResponse
     */
    public function installmentPlanTermsAndConditions($request)
    {
        list($response) = $this->installmentPlanTermsAndConditionsWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanTermsAndConditionsWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\TermsAndConditionsGetRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\TermsAndConditionsGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanTermsAndConditionsWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\TermsAndConditionsGetResponse';
        $request = $this->installmentPlanTermsAndConditionsRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\TermsAndConditionsGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanTermsAndConditionsAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\TermsAndConditionsGetRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanTermsAndConditionsAsync($request)
    {
        return $this->installmentPlanTermsAndConditionsAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanTermsAndConditionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\TermsAndConditionsGetRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanTermsAndConditionsAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\TermsAndConditionsGetResponse';
        $request = $this->installmentPlanTermsAndConditionsRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanTermsAndConditions'
     *
     * @param  \SplititSdkClient\Model\TermsAndConditionsGetRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanTermsAndConditionsRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanTermsAndConditions'
            );
        }

        $resourcePath = '/api/InstallmentPlan/TermsAndConditions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanTestCard
     *
     * @param  \SplititSdkClient\Model\TestCardRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\InstallmentPlanResponse
     */
    public function installmentPlanTestCard($request)
    {
        list($response) = $this->installmentPlanTestCardWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanTestCardWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\TestCardRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\InstallmentPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanTestCardWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InstallmentPlanResponse';
        $request = $this->installmentPlanTestCardRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\InstallmentPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanTestCardAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\TestCardRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanTestCardAsync($request)
    {
        return $this->installmentPlanTestCardAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanTestCardAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\TestCardRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanTestCardAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\InstallmentPlanResponse';
        $request = $this->installmentPlanTestCardRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanTestCard'
     *
     * @param  \SplititSdkClient\Model\TestCardRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanTestCardRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanTestCard'
            );
        }

        $resourcePath = '/api/InstallmentPlan/TestCard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanUpdate
     *
     * @param  \SplititSdkClient\Model\UpdateInstallmentPlanRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\UpdateInstallmentsPlanResponse
     */
    public function installmentPlanUpdate($request)
    {
        list($response) = $this->installmentPlanUpdateWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanUpdateWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\UpdateInstallmentPlanRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\UpdateInstallmentsPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanUpdateWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\UpdateInstallmentsPlanResponse';
        $request = $this->installmentPlanUpdateRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\UpdateInstallmentsPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanUpdateAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\UpdateInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanUpdateAsync($request)
    {
        return $this->installmentPlanUpdateAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanUpdateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\UpdateInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanUpdateAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\UpdateInstallmentsPlanResponse';
        $request = $this->installmentPlanUpdateRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanUpdate'
     *
     * @param  \SplititSdkClient\Model\UpdateInstallmentPlanRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanUpdateRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanUpdate'
            );
        }

        $resourcePath = '/api/InstallmentPlan/Update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installmentPlanVerifyPayment
     *
     * @param  \SplititSdkClient\Model\VerifyPaymentRequest $request request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplititSdkClient\Model\VerifyPaymentResponse
     */
    public function installmentPlanVerifyPayment($request)
    {
        list($response) = $this->installmentPlanVerifyPaymentWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation installmentPlanVerifyPaymentWithHttpInfo
     *
     * @param  \SplititSdkClient\Model\VerifyPaymentRequest $request (required)
     *
     * @throws \SplititSdkClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplititSdkClient\Model\VerifyPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function installmentPlanVerifyPaymentWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\VerifyPaymentResponse';
        $request = $this->installmentPlanVerifyPaymentRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            $result = ObjectSerializer::deserialize($content, $returnType, []);

            if (!$result->getResponseHeader()->getSucceeded()){
                throw ApiException::splitit($result->getResponseHeader());
            }

            return [
                $result,
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplititSdkClient\Model\VerifyPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installmentPlanVerifyPaymentAsync
     *
     * 
     *
     * @param  \SplititSdkClient\Model\VerifyPaymentRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanVerifyPaymentAsync($request)
    {
        return $this->installmentPlanVerifyPaymentAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installmentPlanVerifyPaymentAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplititSdkClient\Model\VerifyPaymentRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function installmentPlanVerifyPaymentAsyncWithHttpInfo($request)
    {
        $returnType = '\SplititSdkClient\Model\VerifyPaymentResponse';
        $request = $this->installmentPlanVerifyPaymentRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $result = ObjectSerializer::deserialize($content, $returnType, []);

                    if (!$result->getResponseHeader()->getSucceeded()){
                        throw ApiException::splitit($result->getResponseHeader());
                    }

                    return [
                        $result,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];

                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installmentPlanVerifyPayment'
     *
     * @param  \SplititSdkClient\Model\VerifyPaymentRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function installmentPlanVerifyPaymentRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling installmentPlanVerifyPayment'
            );
        }

        $resourcePath = '/api/InstallmentPlan/Get/VerifyPayment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $this->injectSessionRequestHeaders($request);
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
